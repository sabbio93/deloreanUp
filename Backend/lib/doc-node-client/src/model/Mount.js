/**
 * Deamon Backup API
 * Deamon used to periodically generate volume's backup and send of this backups
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/MountBindOptions', 'model/MountTmpfsOptions', 'model/MountVolumeOptions'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./MountBindOptions'), require('./MountTmpfsOptions'), require('./MountVolumeOptions'));
  } else {
    // Browser globals (root is window)
    if (!root.DeamonBackupApi) {
      root.DeamonBackupApi = {};
    }
    root.DeamonBackupApi.Mount = factory(root.DeamonBackupApi.ApiClient, root.DeamonBackupApi.MountBindOptions, root.DeamonBackupApi.MountTmpfsOptions, root.DeamonBackupApi.MountVolumeOptions);
  }
}(this, function(ApiClient, MountBindOptions, MountTmpfsOptions, MountVolumeOptions) {
  'use strict';




  /**
   * The Mount model module.
   * @module model/Mount
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>Mount</code>.
   * @alias module:model/Mount
   * @class
   */
  var exports = function() {
    var _this = this;









  };

  /**
   * Constructs a <code>Mount</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Mount} obj Optional instance to populate.
   * @return {module:model/Mount} The populated <code>Mount</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('Target')) {
        obj['Target'] = ApiClient.convertToType(data['Target'], 'String');
      }
      if (data.hasOwnProperty('Source')) {
        obj['Source'] = ApiClient.convertToType(data['Source'], 'String');
      }
      if (data.hasOwnProperty('Type')) {
        obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
      }
      if (data.hasOwnProperty('ReadOnly')) {
        obj['ReadOnly'] = ApiClient.convertToType(data['ReadOnly'], 'Boolean');
      }
      if (data.hasOwnProperty('Consistency')) {
        obj['Consistency'] = ApiClient.convertToType(data['Consistency'], 'String');
      }
      if (data.hasOwnProperty('BindOptions')) {
        obj['BindOptions'] = MountBindOptions.constructFromObject(data['BindOptions']);
      }
      if (data.hasOwnProperty('VolumeOptions')) {
        obj['VolumeOptions'] = MountVolumeOptions.constructFromObject(data['VolumeOptions']);
      }
      if (data.hasOwnProperty('TmpfsOptions')) {
        obj['TmpfsOptions'] = MountTmpfsOptions.constructFromObject(data['TmpfsOptions']);
      }
    }
    return obj;
  }

  /**
   * Container path.
   * @member {String} Target
   */
  exports.prototype['Target'] = undefined;
  /**
   * Mount source (e.g. a volume name, a host path).
   * @member {String} Source
   */
  exports.prototype['Source'] = undefined;
  /**
   * The mount type. Available types:  - `bind` Mounts a file or directory from the host into the container. Must exist prior to creating the container. - `volume` Creates a volume with the given name and options (or uses a pre-existing volume with the same name and options). These are **not** removed when the container is removed. - `tmpfs` Create a tmpfs with the given options. The mount source cannot be specified for tmpfs. 
   * @member {module:model/Mount.TypeEnum} Type
   */
  exports.prototype['Type'] = undefined;
  /**
   * Whether the mount should be read-only.
   * @member {Boolean} ReadOnly
   */
  exports.prototype['ReadOnly'] = undefined;
  /**
   * The consistency requirement for the mount: `default`, `consistent`, `cached`, or `delegated`.
   * @member {String} Consistency
   */
  exports.prototype['Consistency'] = undefined;
  /**
   * @member {module:model/MountBindOptions} BindOptions
   */
  exports.prototype['BindOptions'] = undefined;
  /**
   * @member {module:model/MountVolumeOptions} VolumeOptions
   */
  exports.prototype['VolumeOptions'] = undefined;
  /**
   * @member {module:model/MountTmpfsOptions} TmpfsOptions
   */
  exports.prototype['TmpfsOptions'] = undefined;


  /**
   * Allowed values for the <code>Type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TypeEnum = {
    /**
     * value: "bind"
     * @const
     */
    "bind": "bind",
    /**
     * value: "volume"
     * @const
     */
    "volume": "volume",
    /**
     * value: "tmpfs"
     * @const
     */
    "tmpfs": "tmpfs"  };


  return exports;
}));


